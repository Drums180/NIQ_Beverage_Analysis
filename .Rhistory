markets = case_when(
grepl("Area 1_MT$|AREA I$", markets, ignore.case = TRUE) ~ "Zona 1",
grepl("Area 2_MT$|AREA II$", markets, ignore.case = TRUE) ~ "Zona 2",
grepl("Area 3_MT$|AREA III$", markets, ignore.case = TRUE) ~ "Zona 3",
grepl("Area 4_MT$|AREA IV$", markets, ignore.case = TRUE) ~ "Zona 4",
grepl("Area 5_MT$|AREA V$", markets, ignore.case = TRUE) ~ "Zona 5",
grepl("Area 6_MT$|AREA VI$", markets, ignore.case = TRUE) ~ "Zona 6",
TRUE ~ markets
),
# Estandarizar el formato de "tipo" a "Colas" y "Sabores"
tipo = case_when(
tipo == "COLA" ~ "Colas",
tipo == "Sabores" ~ "Sabores",
TRUE ~ tipo
)
)
# Verificar los valores únicos después de la transformación
BNA_DR %>%
dplyr::select(where(is.character)) %>%
map(~ unique(.x))
# Limpieza y estandarización de bebidas_detalles
bebidas_detalles <- bebidas_detalles %>%
# Eliminar la primera columna si es irrelevante
dplyr::select(-1) %>%
# Estandarización de nombres de columnas: minúsculas y guiones bajos
rename_with(~ .x %>%
str_replace_all("([a-z])([A-Z])", "\\1_\\2") %>%
str_replace_all(" ", "_") %>%
tolower()) %>%
# Eliminar registros con NA en la columna "canasto"
drop_na(canasto) %>%
# Filtrar registros no deseados en la columna "markets"
filter(!markets %in% c("Autoservicios Total Mexico_MT", "TOTAL MEXICO TRAD + MINIS")) %>%
# Crear la columna "canal" basado en el valor de "markets"
mutate(
canal = ifelse(grepl("autoservicios", markets, ignore.case = TRUE), "Autoservicios", "Tradicional"),
# Estandarizar la columna "markets" a "Zona 1" a "Zona 6"
markets = case_when(
grepl("Area 1_MT$|AREA I$", markets, ignore.case = TRUE) ~ "Zona 1",
grepl("Area 2_MT$|AREA II$", markets, ignore.case = TRUE) ~ "Zona 2",
grepl("Area 3_MT$|AREA III$", markets, ignore.case = TRUE) ~ "Zona 3",
grepl("Area 4_MT$|AREA IV$", markets, ignore.case = TRUE) ~ "Zona 4",
grepl("Area 5_MT$|AREA V$", markets, ignore.case = TRUE) ~ "Zona 5",
grepl("Area 6_MT$|AREA VI$", markets, ignore.case = TRUE) ~ "Zona 6",
TRUE ~ markets
),
# Estandarizar el formato de "tipo" a "Colas" y "Sabores"
tipo = case_when(
tipo %in% c("Colas", "COLA", "Cola") ~ "Colas",
TRUE ~ "Sabores"
)
)
# Verificar los valores únicos después de la transformación
bebidas_detalles %>%
dplyr::select(where(is.character)) %>%
map(~ unique(.x))
# Transformar la columna periodo a formato fecha
bebidas_detalles <- bebidas_detalles %>%
mutate(periodo = as.Date(periodo, format = "%d/%m/%Y"))
# Verificar el cambio
str(bebidas_detalles$periodo)
bebidas_detalles <- bebidas_detalles %>%
mutate(
# Estandarizar los sabores a un conjunto reducido de categorías
`m.sabor` = case_when(
grepl("LIMA|LIMON|LIMONADA", `m.sabor`, ignore.case = TRUE) ~ "LIMON",
grepl("NARANJA|MANDARINA|MANDARINADA|ORANGE", `m.sabor`, ignore.case = TRUE) ~ "NARANJA",
grepl("MANZANA|MANZANITA|MANZANETO|MANZANITA CLASICA", `m.sabor`, ignore.case = TRUE) ~ "MANZANA",
grepl("TORONJA|TORONJITA", `m.sabor`, ignore.case = TRUE) ~ "TORONJA",
grepl("CEREZA|CHERRY", `m.sabor`, ignore.case = TRUE) ~ "CEREZA",
grepl("MORAS|BERRY|MORA", `m.sabor`, ignore.case = TRUE) ~ "MORA",
grepl("FRESA|FRAMBUEZA", `m.sabor`, ignore.case = TRUE) ~ "FRESA",
grepl("MANGO|MANGADA", `m.sabor`, ignore.case = TRUE) ~ "MANGO",
grepl("MARACUYA|MARULA", `m.sabor`, ignore.case = TRUE) ~ "MARACUYA",
grepl("ARANDANO", `m.sabor`, ignore.case = TRUE) ~ "ARANDANO",
grepl("SANDIA", `m.sabor`, ignore.case = TRUE) ~ "SANDIA",
grepl("UVA", `m.sabor`, ignore.case = TRUE) ~ "UVA",
grepl("GUAYABA", `m.sabor`, ignore.case = TRUE) ~ "GUAYABA",
grepl("DURAZNO|CHABACANO", `m.sabor`, ignore.case = TRUE) ~ "DURAZNO",
grepl("COCO", `m.sabor`, ignore.case = TRUE) ~ "COCO",
grepl("PINA|PIÑA", `m.sabor`, ignore.case = TRUE) ~ "PINA",
grepl("TAMARINDO", `m.sabor`, ignore.case = TRUE) ~ "TAMARINDO",
grepl("COLA", `m.sabor`, ignore.case = TRUE) ~ "COLA",
grepl("GROSELLA", `m.sabor`, ignore.case = TRUE) ~ "GROSELLA",
grepl("SIDRA", `m.sabor`, ignore.case = TRUE) ~ "SIDRA",
grepl("JAMAICA", `m.sabor`, ignore.case = TRUE) ~ "JAMAICA",
grepl("CITRUS|CITRICO", `m.sabor`, ignore.case = TRUE) ~ "CITRICO",
grepl("MULTISABOR|MIX|FRUTOS ROJOS|TUTI-FRUTI|PONCHE", `m.sabor`, ignore.case = TRUE) ~ "MIX",
grepl("BANANA", `m.sabor`, ignore.case = TRUE) ~ "BANANA",
grepl("RAIZ|GINGER|JENGIBRE", `m.sabor`, ignore.case = TRUE) ~ "RAIZ/GINGER",
grepl("PERA", `m.sabor`, ignore.case = TRUE) ~ "PERA",
grepl("MOJITO|PALOMA|GIN & TONIC", `m.sabor`, ignore.case = TRUE) ~ "COCTEL",
grepl("CEBADA|NEGRA", `m.sabor`, ignore.case = TRUE) ~ "MALTA",
grepl("LYCHEE|BERGAMOTA|MARULA|PITAYA|GRANADA|CIRUELA|GUARANA", `m.sabor`, ignore.case = TRUE) ~ "EXOTICO",
grepl("SIN SABOR", `m.sabor`, ignore.case = TRUE) ~ "SIN SABOR",
TRUE ~ `m.sabor`
),
# Categorizar el tipo de sabor con un enfoque más granular
tipo_sabor = case_when(
`m.sabor` %in% c("LIMON", "NARANJA", "TORONJA", "CITRICO") ~ "CITRICO",
`m.sabor` %in% c("FRESA", "FRAMBUESA", "ARANDANO", "SANDIA",
"UVA", "MELON", "DURAZNO", "MANZANA", "CEREZA", "GROSELLA", "JAMAICA",
"PERA", "GRANADA", "CIRUELA", "MORA") ~ "FRUTA",
`m.sabor` %in% c("BANANA", "MARACUYA", "MANGO", "COCO", "PINA", "GUAYABA") ~ "TROPICAL",
`m.sabor` %in% c("COLA", "CREAM SODA", "RAIZ/GINGER", "SIDRA") ~ "CLASICO",
`m.sabor` %in% c("MIX", "MULTISABOR", "FRUTOS ROJOS", "TUTI-FRUTI") ~ "MIX",
`m.sabor` %in% c("MOJITO", "PALOMA", "GIN & TONIC") ~ "COCTEL",
`m.sabor` %in% c("CEBADA", "NEGRA") ~ "MALTA",
`m.sabor` %in% c("TAMARINDO","LYCHEE", "BERGAMOTA", "EXOTICO") ~ "EXOTICO",
`m.sabor` == "SIN SABOR" ~ "SIN SABOR",
TRUE ~ "OTROS"
)
)
# Verificar los valores únicos después de la estandarización
bebidas_detalles %>%
dplyr::select(`m.sabor`, tipo_sabor) %>%
unique() %>%
arrange(`m.sabor`)
# Verificar los valores únicos después de la transformación
bebidas_detalles %>%
dplyr::select(where(is.character)) %>%
map(~ unique(.x))
summary(BNA_DR)
# Calcular promedio de ventas por periodo, tipo y canal
data_grafico <- BNA_DR %>%
group_by(periodo, tipo, canal) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE), .groups = "drop")
# Gráfica de líneas diferenciadas por tipo y canal con escala logarítmica en Y
ggplot(data_grafico, aes(x = periodo, y = promedio_ventas_unds,
color = tipo, group = interaction(tipo, canal))) +
# Líneas sólidas para todos los grupos
geom_line(size = 1) +
# Puntos con formas distintas por canal
geom_point(aes(shape = canal), size = 3) +
# Escala logarítmica en el eje Y y formateo a millones (M)
scale_y_log10(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
labs(
title = "Periodo vs Promedio de Ventas por Tipo y Canal",
x = "Periodo",
y = "Promedio de Ventas (Millones de Unidades)",
color = "Tipo",
shape = "Canal"
) +
# Colores específicos para cada tipo (2 líneas azules, 2 líneas naranjas)
scale_color_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17")) +
# Formas específicas para los canales (círculo y cuadrado)
scale_shape_manual(values = c("Autoservicios" = 16, "Tradicional" = 15)) +
theme_minimal(base_size = 14, base_family = "Georgia") +
# Personalización del tema
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top"
)
# Calcular la tasa de crecimiento promedio (CAGR) para cada combinación de tipo y canal
tasa_crecimiento <- data_grafico %>%
arrange(periodo) %>%
group_by(tipo, canal) %>%
summarise(
valor_inicial = first(promedio_ventas_unds),
valor_final = last(promedio_ventas_unds),
n_periodos = n() - 1,
tasa_crecimiento_promedio = (valor_final / valor_inicial)^(1 / n_periodos) - 1,
.groups = "drop"
)
# Convertir la tasa de crecimiento a porcentaje
tasa_crecimiento <- tasa_crecimiento %>%
mutate(tasa_crecimiento_promedio = tasa_crecimiento_promedio * 100) %>%
dplyr::select(tipo,canal,tasa_crecimiento_promedio)
# Mostrar las tasas de crecimiento promedio
print(tasa_crecimiento)
# Calcular la correlación entre el precio y las ventas para cada combinación de canal y tipo
correlacion_precio_ventas <- BNA_DR %>%
group_by(canal, tipo) %>%
summarise(correlacion = cor(dist_num, ventas_unds, use = "complete.obs"), .groups = "drop")
# Mostrar los resultados de la correlación
print(correlacion_precio_ventas)
# Calcular el promedio de ventas_unds por market, tipo y presentacion
data_grafico <- bebidas_detalles %>%
group_by(markets, tipo, m.presentacion) %>%
summarise(promedio_ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
# Obtener los valores únicos de m.presentacion
presentaciones <- unique(data_grafico$m.presentacion)
# Crear una lista de gráficos, uno para cada m.presentacion
plots <- map(presentaciones, function(presentacion_actual) {
ggplot(data_grafico %>% filter(m.presentacion == presentacion_actual),
aes(x = markets, y = promedio_ventas_unds, fill = tipo)) +
geom_bar(stat = "identity", position = "stack", color = "white") +
labs(
title = paste("Ventas por Mercado y Tipo -", presentacion_actual),
x = "Mercado",
y = "Ventas (unds)",
fill = "Tipo"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17"))
})
# Mostrar cada gráfico individualmente
plots
# Calcular el promedio de ventas_unds por market, tipo y canal
data_grafico <- bebidas_detalles %>%
group_by(markets, tipo, canal) %>%
summarise(promedio_ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
# Obtener los valores únicos de canal
canales <- unique(data_grafico$canal)
# Crear una lista de gráficos, uno para cada canal
plots <- map(canales, function(canal_actual) {
ggplot(data_grafico %>% filter(canal == canal_actual),
aes(x = markets, y = promedio_ventas_unds, fill = tipo)) +
geom_bar(stat = "identity", position = "stack", color = "white") +
labs(
title = paste("Ventas por Mercado y Tipo - Canal:", canal_actual),
x = "Mercado",
y = "Ventas (unds)",
fill = "Tipo"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17"))
})
# Mostrar cada gráfico individualmente
plots
# Filtrar solo para "Sabores" y calcular el promedio de ventas_unds por market, tipo_sabor y canal
data_grafico <- bebidas_detalles %>%
filter(tipo == "Sabores") %>%
group_by(markets, tipo_sabor, canal) %>%
summarise(promedio_ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
# Obtener los valores únicos de canal
canales <- unique(data_grafico$canal)
# Crear una lista de gráficos, uno para cada canal
plots <- map(canales, function(canal_actual) {
ggplot(data_grafico %>% filter(canal == canal_actual),
aes(x = markets, y = promedio_ventas_unds, fill = tipo_sabor)) +
geom_bar(stat = "identity", position = "stack", color = "white") +
labs(
title = paste("Ventas de Sabores por Mercado - Canal:", canal_actual),
x = "Mercado",
y = "Ventas (unds)",
fill = "Tipo de Sabor"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_fill_brewer(palette = "Set3")
})
# Mostrar cada gráfico individualmente
plots
# Filtrar solo "Sabores" y agregar columnas de año y semestre
data_grafico <- bebidas_detalles %>%
filter(tipo == "Sabores") %>%
mutate(
anio = format(periodo, "%Y"),
semestre = ifelse(format(periodo, "%m") %in% c("01", "02", "03", "04", "05", "06"), "S1", "S2")
) %>%
group_by(anio, semestre, periodo, tipo_sabor) %>%
summarise(promedio_ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
# Crear la gráfica de líneas por año, semestre y tipo_sabor
ggplot(data_grafico, aes(x = periodo, y = promedio_ventas_unds, color = tipo_sabor, group = interaction(tipo_sabor, anio, semestre))) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(
title = "Desempeño de Sabores por Tipo y Año",
x = "Periodo",
y = "Ventas (unds)",
color = "Tipo de Sabor"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
library(dplyr)
library(ggplot2)
library(scales)
# Función para crear el gráfico filtrando por tipo_sabor específico
plot_sabor_desempeno <- function(tipo_sabor_filtro, color_titulo) {
data_grafico <- bebidas_detalles %>%
filter(tipo == "Sabores", tipo_sabor == tipo_sabor_filtro) %>%
mutate(
anio = format(periodo, "%Y"),
semestre = ifelse(format(periodo, "%m") %in% c("01", "02", "03", "04", "05", "06"), "S1", "S2")
) %>%
group_by(anio, semestre, periodo, m.sabor) %>%
summarise(promedio_ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
ggplot(data_grafico, aes(x = periodo, y = promedio_ventas_unds, color = m.sabor, group = interaction(m.sabor, anio, semestre))) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(
title = paste("Desempeño de Sabores", tipo_sabor_filtro, "por Sabor"),
x = "Periodo",
y = "Ventas (unds)",
color = "Sabor"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = color_titulo),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "bottom",
legend.text = element_text(size = 10)
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
}
# Gráfico para CITRICO
plot_citrico <- plot_sabor_desempeno("CITRICO", "#ef5f17")
# Gráfico para FRUTA
plot_fruta <- plot_sabor_desempeno("FRUTA", "#2c6df6")
# Mostrar los gráficos
plot_citrico
plot_fruta
# Sabores específicos a graficar
sabores_especificos <- c("MANZANA", "LIMON", "NARANJA", "TORONJA", "FRESA")
# Filtrar los datos para los sabores específicos y calcular el promedio de ventas por periodo
data_grafico <- bebidas_detalles %>%
filter(tipo == "Sabores", `m.sabor` %in% sabores_especificos) %>%
mutate(
anio = format(periodo, "%Y"),
semestre = ifelse(format(periodo, "%m") %in% c("01", "02", "03", "04", "05", "06"), "S1", "S2")
) %>%
group_by(anio, semestre, periodo, `m.sabor`) %>%
summarise(promedio_ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
# Colores personalizados para cada sabor
colores_sabores <- c(
"MANZANA" = "#03a577ff",   # Rojo
"LIMON" = "#ffb500ff",     # Verde
"NARANJA" = "#ca5113ff",   # Naranja
"TORONJA" = "#83304eff",   # Morado
"FRESA" = "#cb4b7aff"      # Fresa
)
# Crear la gráfica de líneas
ggplot(data_grafico, aes(x = periodo, y = promedio_ventas_unds, color = `m.sabor`, group = `m.sabor`)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
labs(
title = "Desempeño de Top 5 Sabores a lo Largo del Tiempo",
x = "Periodo",
y = "Ventas (unds)",
color = "Sabor"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "bottom",
legend.text = element_text(size = 10)
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_x_date(date_labels = "%b %y", date_breaks = "6 months") +
scale_color_manual(values = colores_sabores)
# Calcular el porcentaje de productos para los sabores seleccionados
sabores_especificos <- c("MANZANA", "LIMON", "NARANJA", "TORONJA", "FRESA")
data_grafico <- bebidas_detalles %>%
filter(m.sabor %in% sabores_especificos) %>%
group_by(m.sabor) %>%
summarise(total_productos = n(), .groups = "drop") %>%
mutate(porcentaje = total_productos / sum(total_productos) * 100)
# Definir colores personalizados
colores_sabores <- c(
"MANZANA" = "#03a577ff",
"LIMON" = "#ffb500ff",
"NARANJA" = "#ca5113ff",
"TORONJA" = "#83304eff",
"FRESA" = "#cb4b7aff"
)
# Crear la gráfica de pastel
ggplot(data_grafico, aes(x = "", y = porcentaje, fill = m.sabor)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
labs(
title = "Distribución de Productos por Sabor (Solo los 5 principales)",
fill = "Sabor"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
legend.position = "right"
) +
scale_fill_manual(values = colores_sabores) +
geom_text(aes(label = paste0(round(porcentaje, 1), "%")),
position = position_stack(vjust = 0.5), size = 5, color = "white")
# Calcular el promedio de ventas_unds por market y tipo
data_grafico <- BNA_DR %>%
group_by(markets, tipo) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE), .groups = "drop")
# Crear la gráfica de barras apiladas
ggplot(data_grafico, aes(x = markets, y = promedio_ventas_unds, fill = tipo)) +
geom_bar(stat = "identity", position = "stack", color = "white") +
labs(
title = "Promedio de Ventas por Mercado y Tipo",
x = "Mercado",
y = "Promedio de Ventas (unds)",
fill = "Tipo"
) +
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17"))
# Filtrar datos solo para sabor "Fresa" y sumar ventas por periodo
fresa_ts <- bebidas_detalles %>%
filter(m.sabor == "FRESA") %>%
group_by(periodo) %>%
summarise(ventas_unds = sum(vtas_unds, na.rm = TRUE), .groups = "drop")
# Convertir periodo a Date
fresa_ts$periodo <- as.Date(fresa_ts$periodo, format = "%d/%m/%Y")
# Prueba de estacionariedad Dickey-Fuller
adf_test_fresa <- adf.test(fresa_ts$ventas_unds, alternative = "stationary")
print(adf_test_fresa)
# Convertir a serie temporal
fresa_series <- ts(fresa_ts$ventas_unds, frequency = 12, start = c(as.numeric(format(min(fresa_ts$periodo), "%Y")), as.numeric(format(min(fresa_ts$periodo), "%m"))))
# Ajustar modelo SARIMA automáticamente
sarima_fresa <- auto.arima(fresa_series, seasonal = TRUE)
# Generar predicciones para los próximos 12 meses
forecast_fresa <- forecast(sarima_fresa, h = 12)
# Imprimir resumen del modelo
summary(sarima_fresa)
# Extraer fechas y convertir a dataframe
periodos_futuro <- seq(max(fresa_ts$periodo) + 1, by = "month", length.out = 12)
predicciones_fresa <- data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_fresa$mean),
lower_80 = as.numeric(forecast_fresa$lower[,1]),
upper_80 = as.numeric(forecast_fresa$upper[,1]),
lower_95 = as.numeric(forecast_fresa$lower[,2]),
upper_95 = as.numeric(forecast_fresa$upper[,2]),
anio = "Predicción",
mes = format(periodos_futuro, "%m")
)
# Agregar columna de año y mes a los datos históricos
fresa_ts <- fresa_ts %>%
mutate(
anio = format(periodo, "%Y"),
mes = format(periodo, "%m")
)
# Generar escala de grises para los años pasados
anios_historicos <- unique(fresa_ts$anio)
escala_grises <- scales::seq_gradient_pal("lightgrey", "black", "Lab")(seq(0, 1, length.out = length(anios_historicos)))
names(escala_grises) <- anios_historicos
ggplot() +
# Datos históricos con líneas en tonos de gris
geom_line(data = fresa_ts, aes(x = as.numeric(mes), y = ventas_unds, group = anio, color = anio), size = 1, alpha = 0.6) +
scale_color_manual(values = escala_grises, guide = "none") +
# Pronóstico con línea sólida en color destacado
geom_line(data = predicciones_fresa, aes(x = as.numeric(mes), y = ventas_unds), color = "#cb4b7aff", size = 1.5, linetype = "solid") +
# Intervalos de confianza
geom_ribbon(data = predicciones_fresa, aes(x = as.numeric(mes), ymin = lower_80, ymax = upper_80), fill = "#cb4b7aff", alpha = 0.2) +
geom_ribbon(data = predicciones_fresa, aes(x = as.numeric(mes), ymin = lower_95, ymax = upper_95), fill = "#cb4b7aff", alpha = 0.1) +
# Etiquetas y tema
labs(
title = "Pronóstico de Ventas de Fresa - Year over Year",
x = "Mes",
y = "Ventas (Millones de Unidades)"
) +
# Personalización del tema
theme_minimal(base_size = 14, base_family = "Georgia") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
# Formato del eje Y en millones y eje X en meses
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_x_continuous(breaks = 1:12, labels = month.abb) +
# Límites del eje X
expand_limits(x = c(1, 12))
