geom_line(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 1) +
geom_point(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 2.5) +
# Pronóstico con líneas punteadas
geom_line(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
size = 1, linetype = "dashed") +
geom_point(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
shape = 17, size = 3) +
# Intervalos de confianza
geom_ribbon(data = pronostico, aes(x = periodo, ymin = lower, ymax = upper, fill = tipo),
alpha = 0.1) +
# Etiquetas y tema
labs(
title = "Historial y Pronóstico de Ventas por Categoría",
subtitle = "Comparativa entre Colas y Sabores desde 2023 en adelante",
x = "Periodo",
y = "Ventas (Millones de Unidades)",
color = "Tipo",
fill = "Tipo"
) +
# Personalización del tema
theme_minimal(base_size = 14, base_family = "Georgia") +
# Eliminar grid lines y fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank()
) +
# Formato del eje Y en millones
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
# Formato del eje X cada 4 meses con fechas abreviadas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months") +
# Colores personalizados para las líneas y el relleno
scale_color_manual(values = c("COLA" = "#0073C2", "Sabores" = "#E69F00")) +
scale_fill_manual(values = c("COLA" = "#0073C2", "Sabores" = "#E69F00"))
BNA_TT %>%
group_by(periodo) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE)) %>%
ggplot(aes(x = periodo, y = promedio_ventas_unds, group = 1)) +
# Línea más delgada y con un color más suave
geom_line(color = "#0073C2", size = 1) +
# Puntos destacados con mayor contraste
geom_point(color = "#005B96", size = 3) +
# Etiquetas de la gráfica con una fuente clara y fondo blanco
labs(
title = "Periodo vs Promedio de Ventas",
x = "Periodo",
y = "Promedio de Ventas (unds)"
) +
# Tema minimalista mejorado
theme_minimal(base_size = 14, base_family = "Georgia") +
# Eliminar líneas de la cuadrícula y personalizar el fondo
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333")
) +
# Formato del eje X con fechas abreviadas si "periodo" es una fecha
scale_x_date(date_labels = "%b %y", date_breaks = "4 months") +
# Formato del eje Y en miles para simplificar la visualización
scale_y_continuous(labels = scales::label_number(scale = 1e-3, suffix = "k"))
# Obtener niveles únicos de m.presentacion
presentaciones <- unique(BNA_TT$m.presentacion)
# Crear gráficas separadas por cada m.presentacion con colores personalizados
plots <- map(presentaciones, function(presentacion_actual) {
BNA_TT %>%
filter(m.presentacion == presentacion_actual) %>%
group_by(periodo, tipo) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = periodo, y = promedio_ventas_unds, color = tipo, group = tipo)) +
# Líneas y puntos con colores personalizados
geom_line(size = 1.2) +
geom_point(size = 3) +
# Etiquetas y título
labs(
title = paste("Periodo vs Promedio de Ventas por Tipo:", presentacion_actual),
x = "Periodo",
y = "Promedio de Ventas (unds)",
color = "Tipo"
) +
# Tema minimalista y limpio
theme_minimal(base_size = 14, base_family = "Georgia") +
# Personalización de colores
scale_color_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17")) +
# Estilo del gráfico sin grid lines y con fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top"
) +
# Eje X con formato abreviado para las fechas (si aplica)
scale_x_date(date_labels = "%b %y", date_breaks = "4 months")
})
# Mostrar las gráficas individualmente
plots
# Obtener niveles únicos de m.presentacion
presentaciones <- unique(BNA_TT$m.presentacion)
# Crear gráficas separadas por cada m.presentacion con colores personalizados
plots <- map(presentaciones, function(presentacion_actual) {
BNA_TT %>%
filter(m.presentacion == presentacion_actual) %>%
group_by(periodo, tipo) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = periodo, y = promedio_ventas_unds, color = tipo, group = tipo)) +
# Líneas y puntos con colores personalizados
geom_line(size = 1.2) +
geom_point(size = 3) +
# Etiquetas y título
labs(
title = paste("Periodo vs Promedio de Ventas por Tipo:", presentacion_actual),
x = "Periodo",
y = "Promedio de Ventas (unds)",
color = "Tipo"
) +
# Tema minimalista y limpio
theme_minimal(base_size = 14, base_family = "Georgia") +
# Personalización de colores
scale_color_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17")) +
# Estilo del gráfico sin grid lines y con fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top"
) +
# Eje X con formato abreviado para las fechas (si aplica)
scale_x_date(date_labels = "%b %y", date_breaks = "4 months")
})
# Mostrar las gráficas individualmente
plots
# Filtrar solo para "MULTI-PACK" y crear la gráfica
BNA_TT %>%
filter(m.presentacion == "MULTI-PACK") %>%
group_by(periodo, tipo) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = periodo, y = promedio_ventas_unds, color = tipo, group = tipo)) +
# Líneas y puntos con colores personalizados
geom_line(size = 1.2) +
geom_point(size = 3) +
# Etiquetas y título
labs(
title = "Periodo vs Promedio de Ventas por Tipo: MULTI-PACK",
x = "Periodo",
y = "Promedio de Ventas (unds)",
color = "Tipo"
) +
# Tema minimalista y limpio
theme_minimal(base_size = 14, base_family = "Georgia") +
# Personalización de colores
scale_color_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17")) +
# Estilo del gráfico sin grid lines y con fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top"
) +
# Eje X con formato abreviado para las fechas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months")
# Filtrar solo para "MULTI-PACK" y crear la gráfica
BNA_TT %>%
filter(m.presentacion == "MULTI-PACK") %>%
group_by(periodo, tipo) %>%
summarise(promedio_ventas_unds = mean(ventas_unds, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = periodo, y = promedio_ventas_unds, color = tipo, group = tipo)) +
# Líneas y puntos con colores personalizados
geom_line(size = 1.2) +
geom_point(size = 3) +
# Etiquetas y título
labs(
title = "Periodo vs Promedio de Ventas por Categoría: MULTI-PACK",
x = "Periodo",
y = "Promedio de Ventas (unds)",
color = "Tipo"
) +
# Tema minimalista y limpio
theme_minimal(base_size = 14, base_family = "Georgia") +
# Personalización de colores
scale_color_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17")) +
# Estilo del gráfico sin grid lines y con fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5, color = "#333333"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top"
) +
# Eje X con formato abreviado para las fechas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months")
# Filtrar de 2024 en adelante y añadir intervalos de confianza
# Primero, generar dataframe histórico combinado
historico <- bind_rows(
BNA_COLA_TS %>% mutate(tipo = "COLA"),
BNA_BEBIDAS_TS %>% mutate(tipo = "Sabores")
) %>%
dplyr::select(periodo, ventas_unds, tipo) %>%
filter(as.Date(periodo) >= as.Date("2023-01-01")) # Filtrar solo periodos desde 2024 en adelante
# Asegurarse de que el periodo sea de tipo Date
historico$periodo <- as.Date(historico$periodo)
# Generar dataframe de pronóstico con intervalos de confianza
# Si el periodo es una fecha, utilizar seq.Date en lugar de seq
periodos_futuro <- seq(max(historico$periodo) + 1, by = "month", length.out = 5)
pronostico <- bind_rows(
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_cola$mean),
lower = as.numeric(forecast_arima_cola$lower[, 2]),
upper = as.numeric(forecast_arima_cola$upper[, 2]),
tipo = "COLA"
),
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_bebidas$mean),
lower = as.numeric(forecast_arima_bebidas$lower[, 2]),
upper = as.numeric(forecast_arima_bebidas$upper[, 2]),
tipo = "Sabores"
)
)
# Gráfica combinada con intervalos de confianza y filtro desde 2024
ggplot() +
# Datos históricos filtrados
geom_line(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 1) +
geom_point(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 2.5) +
# Pronóstico con líneas punteadas
geom_line(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
size = 1, linetype = "dashed") +
geom_point(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
shape = 17, size = 3) +
# Intervalos de confianza
geom_ribbon(data = pronostico, aes(x = periodo, ymin = lower, ymax = upper, fill = tipo),
alpha = 0.1) +
# Etiquetas y tema
labs(
title = "Historial y Pronóstico de Ventas por Categoría",
subtitle = "Comparativa entre Colas y Sabores desde 2023 en adelante",
x = "Periodo",
y = "Ventas (Millones de Unidades)",
color = "Tipo",
fill = "Tipo"
) +
# Personalización del tema
theme_minimal(base_size = 14, base_family = "Georgia") +
# Eliminar grid lines y fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank()
) +
# Formato del eje Y en millones
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
# Formato del eje X cada 4 meses con fechas abreviadas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months") +
# Colores personalizados para las líneas y el relleno
scale_color_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17")) +
scale_fill_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17"))
# Filtrar de 2024 en adelante y añadir intervalos de confianza
# Primero, generar dataframe histórico combinado
historico <- bind_rows(
BNA_COLA_TS %>% mutate(tipo = "COLA"),
BNA_BEBIDAS_TS %>% mutate(tipo = "Sabores")
) %>%
dplyr::select(periodo, ventas_unds, tipo) %>%
filter(as.Date(periodo) >= as.Date("2023-01-01")) # Filtrar solo periodos desde 2024 en adelante
# Asegurarse de que el periodo sea de tipo Date
historico$periodo <- as.Date(historico$periodo)
# Generar dataframe de pronóstico con intervalos de confianza
# Si el periodo es una fecha, utilizar seq.Date en lugar de seq
periodos_futuro <- seq(max(historico$periodo) + 1, by = "month", length.out = 5)
pronostico <- bind_rows(
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_cola$mean),
lower = as.numeric(forecast_arima_cola$lower[, 2]),
upper = as.numeric(forecast_arima_cola$upper[, 2]),
tipo = "COLA"
),
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_bebidas$mean),
lower = as.numeric(forecast_arima_bebidas$lower[, 2]),
upper = as.numeric(forecast_arima_bebidas$upper[, 2]),
tipo = "Sabores"
)
)
# Gráfica combinada con intervalos de confianza y filtro desde 2024
ggplot() +
# Datos históricos filtrados
geom_line(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 1) +
geom_point(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 2.5) +
# Pronóstico con líneas punteadas
geom_line(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
size = 1, linetype = "dashed") +
geom_point(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
shape = 17, size = 3) +
# Intervalos de confianza
geom_ribbon(data = pronostico, aes(x = periodo, ymin = lower, ymax = upper, fill = tipo),
alpha = 0.1) +
# Etiquetas y tema
labs(
title = "Historial y Pronóstico de Ventas por Categoría",
subtitle = "Comparativa entre Colas y Sabores desde 2023 en adelante",
x = "Periodo",
y = "Ventas (Millones de Unidades)",
color = "Tipo",
fill = "Tipo"
) +
# Personalización del tema
theme_minimal(base_size = 14, base_family = "Georgia") +
# Eliminar grid lines y fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank()
) +
# Formato del eje Y en millones
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
# Formato del eje X cada 4 meses con fechas abreviadas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months") +
# Colores personalizados para las líneas y el relleno
scale_color_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17")) +
scale_fill_manual(values = c("COLA" = "#2c6df6", "Sabores" = "#ef5f17"))
# Filtrar de 2024 en adelante y añadir intervalos de confianza
# Primero, generar dataframe histórico combinado
historico <- bind_rows(
BNA_COLA_TS %>% mutate(tipo = "Colas"),
BNA_BEBIDAS_TS %>% mutate(tipo = "Sabores")
) %>%
dplyr::select(periodo, ventas_unds, tipo) %>%
filter(as.Date(periodo) >= as.Date("2023-01-01")) # Filtrar solo periodos desde 2024 en adelante
# Asegurarse de que el periodo sea de tipo Date
historico$periodo <- as.Date(historico$periodo)
# Generar dataframe de pronóstico con intervalos de confianza
# Si el periodo es una fecha, utilizar seq.Date en lugar de seq
periodos_futuro <- seq(max(historico$periodo) + 1, by = "month", length.out = 5)
pronostico <- bind_rows(
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_cola$mean),
lower = as.numeric(forecast_arima_cola$lower[, 2]),
upper = as.numeric(forecast_arima_cola$upper[, 2]),
tipo = "COLA"
),
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_bebidas$mean),
lower = as.numeric(forecast_arima_bebidas$lower[, 2]),
upper = as.numeric(forecast_arima_bebidas$upper[, 2]),
tipo = "Sabores"
)
)
# Gráfica combinada con intervalos de confianza y filtro desde 2024
ggplot() +
# Datos históricos filtrados
geom_line(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 1) +
geom_point(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 2.5) +
# Pronóstico con líneas punteadas
geom_line(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
size = 1, linetype = "dashed") +
geom_point(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
shape = 17, size = 3) +
# Intervalos de confianza
geom_ribbon(data = pronostico, aes(x = periodo, ymin = lower, ymax = upper, fill = tipo),
alpha = 0.1) +
# Etiquetas y tema
labs(
title = "Historial y Pronóstico de Ventas por Categoría",
subtitle = "Comparativa entre Colas y Sabores desde 2023 en adelante",
x = "Periodo",
y = "Ventas (Millones de Unidades)",
color = "Tipo",
fill = "Tipo"
) +
# Personalización del tema
theme_minimal(base_size = 14, base_family = "Georgia") +
# Eliminar grid lines y fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank()
) +
# Formato del eje Y en millones
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
# Formato del eje X cada 4 meses con fechas abreviadas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months") +
# Colores personalizados para las líneas y el relleno
scale_color_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17")) +
scale_fill_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17"))
# Filtrar de 2024 en adelante y añadir intervalos de confianza
# Primero, generar dataframe histórico combinado
historico <- bind_rows(
BNA_COLA_TS %>% mutate(tipo = "Colas"),
BNA_BEBIDAS_TS %>% mutate(tipo = "Sabores")
) %>%
dplyr::select(periodo, ventas_unds, tipo) %>%
filter(as.Date(periodo) >= as.Date("2023-01-01")) # Filtrar solo periodos desde 2024 en adelante
# Asegurarse de que el periodo sea de tipo Date
historico$periodo <- as.Date(historico$periodo)
# Generar dataframe de pronóstico con intervalos de confianza
# Si el periodo es una fecha, utilizar seq.Date en lugar de seq
periodos_futuro <- seq(max(historico$periodo) + 1, by = "month", length.out = 5)
pronostico <- bind_rows(
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_cola$mean),
lower = as.numeric(forecast_arima_cola$lower[, 2]),
upper = as.numeric(forecast_arima_cola$upper[, 2]),
tipo = "Colas"
),
data.frame(
periodo = periodos_futuro,
ventas_unds = as.numeric(forecast_arima_bebidas$mean),
lower = as.numeric(forecast_arima_bebidas$lower[, 2]),
upper = as.numeric(forecast_arima_bebidas$upper[, 2]),
tipo = "Sabores"
)
)
# Gráfica combinada con intervalos de confianza y filtro desde 2024
ggplot() +
# Datos históricos filtrados
geom_line(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 1) +
geom_point(data = historico, aes(x = periodo, y = ventas_unds, color = tipo), size = 2.5) +
# Pronóstico con líneas punteadas
geom_line(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
size = 1, linetype = "dashed") +
geom_point(data = pronostico, aes(x = periodo, y = ventas_unds, color = tipo),
shape = 17, size = 3) +
# Intervalos de confianza
geom_ribbon(data = pronostico, aes(x = periodo, ymin = lower, ymax = upper, fill = tipo),
alpha = 0.1) +
# Etiquetas y tema
labs(
title = "Historial y Pronóstico de Ventas por Categoría",
subtitle = "Comparativa entre Colas y Sabores desde 2023 en adelante",
x = "Periodo",
y = "Ventas (Millones de Unidades)",
color = "Tipo",
fill = "Tipo"
) +
# Personalización del tema
theme_minimal(base_size = 14, base_family = "Georgia") +
# Eliminar grid lines y fondo blanco
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5, color = "#333333"),
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "#333333"),
legend.position = "top",
legend.background = element_blank(),
legend.key = element_blank()
) +
# Formato del eje Y en millones
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
# Formato del eje X cada 4 meses con fechas abreviadas
scale_x_date(date_labels = "%b %y", date_breaks = "4 months") +
# Colores personalizados para las líneas y el relleno
scale_color_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17")) +
scale_fill_manual(values = c("Colas" = "#2c6df6", "Sabores" = "#ef5f17"))
